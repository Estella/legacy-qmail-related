*** vpopbull.c.orig	Thu May  2 17:55:38 2002
--- vpopbull.c	Thu May  2 17:56:09 2002
***************
*** 53,149 ****
  #define SYMBOLIC_LINK_IT 2
  
  static int DeliveryMethod = COPY_IT;
  
  int process_domain(char *,  FILE *, FILE *);
  int copy_email( FILE *, char *, char *, struct vqpasswd *);
  int in_exclude_list( FILE *, char *, char *);
  void usage();
  
  int main(argc,argv)
   int argc;
   char *argv[];
  {
-  int i;
   FILE *fsi = NULL;
   FILE *fsx = NULL;
   FILE *fsassign;
   char *domain;
!  char *domain_dir;
   char *tmpstr;
  
-   memset(EmailFile,0,MAX_BUFF);
-   memset(Domain,0,MAX_BUFF);
    memset(TmpBuf,0,MAX_BUFF);
    memset(MsgBuf,0,MSG_BUF_SIZE);
  
    Verbose = 0;
    DoNothing = 0;
    if ( argc == 1 ) {
      usage();
      vexit(-1);
    }
    getcwd(CurDir,MAX_BUFF);
  
!   for(i=1;i<argc;++i){
!     if ( strcmp( "-v", argv[i] ) == 0 )  {
!       Verbose = 1;
!     } else if ( strcmp( "-c", argv[i] ) == 0 )  {
!       DeliveryMethod = COPY_IT; 
!     } else if ( strcmp( "-s", argv[i] ) == 0 )  {
!       DeliveryMethod = SYMBOLIC_LINK_IT; 
!     } else if ( strcmp( "-h", argv[i] ) == 0 )  {
!       DeliveryMethod = HARD_LINK_IT; 
!     } else if ( strcmp( "-n", argv[i] ) == 0 )  {
!       DoNothing = 1;
!     } else if ( strcmp( "-f", argv[i] ) == 0 )  {
!       ++i;
!       strncpy( EmailFile, argv[i], MAX_BUFF);
!       if ( (fsi = fopen(EmailFile, "r")) == NULL ) {
          printf("Could not open file %s\n", EmailFile);
          vexit(-1);
!       }
!     } else if ( strcmp( "-e", argv[i] ) == 0 ) {
!       ++i;
!       strncpy( ExcludeFile, argv[i], MAX_BUFF);
!       if ( (fsx = fopen(ExcludeFile, "r")) == NULL ) {
          printf("Could not open file %s\n", ExcludeFile);
          vexit(-1);
-       }
-     } else {
-       if ( argv[i][0] == '-' ) {
-         usage();
-         vexit(-1);
-       } else {
-         if ( EmailFile[0] != 0 || DoNothing == 1 ) {
-           snprintf(TmpBuf, MAX_BUFF, "%s/users/assign",  QMAILDIR);
-           if ( (fsassign = fopen(TmpBuf, "r")) == NULL ) {
-             perror("can not open assign file");
-             vexit(0);
-           }
- 	  strncpy( Domain, argv[i], MAX_BUFF);
- 
-           while ( fgets(TmpBuf, 500, fsassign) != NULL ) {
-             if ( (tmpstr=strtok(TmpBuf, TOKENS)) == NULL ) continue;
-             if ( (domain=strtok(NULL, TOKENS)) == NULL ) continue;
-             if ( strcmp(domain, Domain ) != 0 ) continue;
-             if ( (tmpstr=strtok(NULL, TOKENS)) == NULL ) continue;
-             if ( (tmpstr=strtok(NULL, TOKENS)) == NULL ) continue;
-             if ( (domain_dir=strtok(NULL, TOKENS)) == NULL ) continue;
-             chdir(domain_dir);
- 	    process_domain(Domain,  fsi, fsx );
-           }
-           fclose(fsassign);
-           vexit(0);
-         }
-       }
      }
    }
  
!   if ( (EmailFile[0] != 0 || DoNothing == 1)  && Domain[0] == 0 ) {
!     snprintf(TmpBuf, MAX_BUFF, "%s/assign",  QMAILDIR);
      if ( (fsassign = fopen(TmpBuf, "r")) == NULL ) {
!       perror("can not open assign file");
!       vexit(0);
      }
  
      while ( fgets(TmpBuf, 500, fsassign) != NULL ) {
--- 53,127 ----
  #define SYMBOLIC_LINK_IT 2
  
  static int DeliveryMethod = COPY_IT;
+ int EmailFileFlag = 0;
+ int ExcludeFileFlag = 0;
  
  int process_domain(char *,  FILE *, FILE *);
  int copy_email( FILE *, char *, char *, struct vqpasswd *);
  int in_exclude_list( FILE *, char *, char *);
+ void get_options(int argc,char **argv);
  void usage();
  
  int main(argc,argv)
   int argc;
   char *argv[];
  {
   FILE *fsi = NULL;
   FILE *fsx = NULL;
   FILE *fsassign;
   char *domain;
!  char *domain_dir = NULL;
   char *tmpstr;
  
    memset(TmpBuf,0,MAX_BUFF);
    memset(MsgBuf,0,MSG_BUF_SIZE);
  
+ 
    Verbose = 0;
    DoNothing = 0;
+ 
    if ( argc == 1 ) {
      usage();
      vexit(-1);
    }
+ 
+   get_options(argc,argv);
+ 
    getcwd(CurDir,MAX_BUFF);
  
!   if ( EmailFileFlag == 1 ) {
!     if ( (fsi = fopen(EmailFile, "r")) == NULL ) {
          printf("Could not open file %s\n", EmailFile);
          vexit(-1);
!     }
!   }
! 
!   if ( ExcludeFileFlag == 1 ) {
!     if ( (fsx = fopen(ExcludeFile, "r")) == NULL ) {
          printf("Could not open file %s\n", ExcludeFile);
          vexit(-1);
      }
    }
  
!   if (( EmailFile[0] != 0 || DoNothing == 1) && Domain[0] != 0 ) {
! 
!     /* Process list of domains */
!     domain = strtok(Domain, " ");
!     while (domain != NULL ) {
!         if((vget_assign(domain, domain_dir, 156, NULL, NULL)) != NULL) {
!             process_domain(domain,  fsi, fsx );
!         }
!         domain = strtok(NULL, " ");
!     }
!     vexit(0);
! 
!   } else if ( (EmailFile[0] != 0 || DoNothing == 1)  && Domain[0] == 0 ) {
! 
!     /* Process ALL domains */
!     snprintf(TmpBuf, MAX_BUFF, "%s/users/assign",  QMAILDIR);
      if ( (fsassign = fopen(TmpBuf, "r")) == NULL ) {
!         perror("can not open assign file");
!         vexit(0);
      }
  
      while ( fgets(TmpBuf, 500, fsassign) != NULL ) {
***************
*** 153,159 ****
        if ( (tmpstr=strtok(NULL, TOKENS)) == NULL ) continue;
        if ( (domain_dir=strtok(NULL, TOKENS)) == NULL ) continue;
        chdir(domain_dir);
!       process_domain(Domain,  fsi, fsx );
      }
      fclose(fsassign);
    }
--- 131,137 ----
        if ( (tmpstr=strtok(NULL, TOKENS)) == NULL ) continue;
        if ( (domain_dir=strtok(NULL, TOKENS)) == NULL ) continue;
        chdir(domain_dir);
!       process_domain(domain,  fsi, fsx );
      }
      fclose(fsassign);
    }
***************
*** 258,269 ****
  	return(0);
  }
  
  void usage()
  {
! 	printf("usage: -f email_file [-e exclude_email_addr_file]\n");
! 	printf("       [-v (verbose)] [-n (don't mail)]\n");
! 	printf("       [-c (default, copy file)]\n"); 
! 	printf("       [-h (use hard links)]\n"); 
! 	printf("       [-s (use symbolic links)]\n"); 
! 	printf("       [ virtual_domain ...] \n"); 
  }
--- 236,314 ----
  	return(0);
  }
  
+ void get_options(int argc, char **argv)
+ {
+  int n = 0;
+  int c;
+  int errflag;
+  extern char *optarg;
+  extern int optind;
+ 
+     memset(Domain, 0, MAX_BUFF);
+     memset(EmailFile, 0, MAX_BUFF);
+     memset(ExcludeFile, 0, MAX_BUFF);
+ 
+     errflag = 0;
+     EmailFileFlag = 0;
+     ExcludeFileFlag = 0;
+     while( !errflag && (c=getopt(argc,argv,"Vvcshnf:e:")) != -1 ) {
+         switch(c) {
+             case 'v':
+                 printf("version: %s\n", VERSION);
+                 break;
+             case 'V':
+                 Verbose = 1;
+                 break;
+             case 's':
+                 DeliveryMethod = SYMBOLIC_LINK_IT; 
+                 break;
+             case 'c':
+                 DeliveryMethod = COPY_IT; 
+                 break;
+             case 'f':
+                 EmailFileFlag = 1;
+                 strncpy( EmailFile, optarg, MAX_BUFF-1);
+                 break;
+             case 'e':
+                 ExcludeFileFlag = 1;
+                 strncpy( ExcludeFile, optarg, MAX_BUFF-1);
+                 break;
+             case 'h':
+                 DeliveryMethod = HARD_LINK_IT; 
+                 break;
+             case 'n':
+                 DoNothing = 1;
+                 break;
+                 break;
+             default:
+                 errflag = 1;
+                 break;
+         }
+     }
+ 
+     if ( errflag > 0 ) {
+         usage();
+         vexit(-1);
+     }
+ 
+     n = 0;
+     while ( optind < argc ) { 
+         if((n=1)) strncat(Domain, " ", MAX_BUFF);
+         strncat(Domain, argv[optind], MAX_BUFF);
+         n = 1;
+         ++optind;
+     }
+ }
+ 
  void usage()
  {
! 	printf("usage: vpopbull [options] [virtual_domain] [...]\n");
! 	printf("       -v (print version number)\n");
! 	printf("       -V (verbose)\n");
! 	printf("       -f email_file (file with message contents)\n");
! 	printf("       -e exclude_email_addr_file (list of addresses to exclude)\n");
! 	printf("       -n (don't mail. Use with -V to list accounts)\n");
! 	printf("       -c (default, copy file)\n"); 
! 	printf("       -h (use hard links)\n"); 
! 	printf("       -s (use symbolic links)\n"); 
  }
